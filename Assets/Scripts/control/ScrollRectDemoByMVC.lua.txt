---------------------------------------------------------------------
unity=CS.UnityEngine
localData={}
function init()
	avatarControl=unity.GameObject.Find("AvatarSystem"):GetComponent("AvatarControl")
	localData._needDispose={}
	localData.scrollRect=scrollRect:GetComponent("ScrollRect")
	localData.listContent=listContent
	localData.datas=self.scrollModel.datas
	loadAssets(6,3,80,1,"item")
	setRecord()
end

--config the moduel
function loadAssets(row1,col1,itemWidth1,chink1,prefabName)
	localData.item=unity.Resources.Load(prefabName)
	self.scrollModel.item=localData.item
	localData.row=row1
	self.row=row1
	localData.col=col1
	self.col=col1
	localData.chink=chink1
	self.chink=chink1
	--temp=localData.item:GetComponent("RectTransform").rect.size.x
	localData.itemWidth=itemWidth1
	self.scrollModel.itemWidth=itemWidth1
	localData.cell=localData.chink+localData.itemWidth
	self.cell=localData.cell
	localData.isDragIng=false
	self.isDragIng=false
	localData.isLoadingRecord=false
	self.isLoadingRecord=false
end

--config grid
function setRecordAndGrid()
	while localData.isLoadingRecord do
		coroutine.yield()
	end
	localData.isLoadingRecord=true
	self.scrollModel.datas=avatarControl:getAllMeshNameOfPart(self.scrollView.partName)

	--print(self.scrollModel.datas.Count)
	localData.datas=self.scrollModel.datas
	local count=localData.datas.Count
	h=count/localData.col*localData.cell
	if count%localData.col~=0 then
		h=h+localData.cell
	end
	self.scrollView:setContent(localData.col*localData.cell,h)
	local rectTransform=localData.listContent:GetComponent("RectTransform")
	--rectTransform.sizeDelta=unity.Vector2(localData.col*localData.cell,h)
	--rectTransform.localPosition=unity.Vector3(0,0,0)
	localData.isDragIng=true
	local temCount
	if count>=localData.row*localData.col then
		temCount=localData.row*localData.col
	else
		temCount=count
	end
	--init some to display
	for i = 0, temCount-1,1 do
		local go=CS.UnityEngine.Object.Instantiate(localData.item,unity.Vector3(0,0,0),CS.UnityEngine.Quaternion.identity)
		go.transform:SetParent(rectTransform)
		self.scrollView:setRecordItem(i,go)
	end
	localData.isDragIng=false
	self.isDragIng=false
	localData.isLoadingRecord=false
	self.isLoadingRecord=false
end
function setRecord()
	--clear grid
	clearRecord()
	local ots=coroutine.create(setRecordAndGrid)
	coroutine.resume(ots)
end
--clear grid and items
function clearRecord()
	if localData.datasAndIndex~=nil then
		for k,v in pairs(localData.datasAndIndex) do
			k:SetActive(false)
			localData._needDispose[(#localData._needDispose)]=k
		end
	end
	localData.datasAndIndex={}
end

init()
